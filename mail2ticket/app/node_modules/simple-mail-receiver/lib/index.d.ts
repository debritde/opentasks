/// <reference types="node" />
import * as Imap from 'imap';
import { ParsedMail } from 'mailparser';
import * as EventEmitter from 'node:events';
declare type Options = Partial<Imap.Config> & {
    markSeen: boolean;
    box: string;
    search: string[];
    autoReconnect: boolean;
};
declare type Mail = {
    uid: string;
} & ParsedMail;
interface MailReceiverEvents {
    error: (error: Error) => void;
    ready: () => void;
    end: () => void;
    close: (hasError: boolean) => void;
    uidvalidity: (uidValidity: number) => void;
    mail: (parsedMail: Mail) => void;
}
export declare interface MailReceiver {
    on<U extends keyof MailReceiverEvents>(event: U, listener: MailReceiverEvents[U]): this;
    emit<U extends keyof MailReceiverEvents>(event: U, ...args: Parameters<MailReceiverEvents[U]>): boolean;
}
export declare class MailReceiver extends EventEmitter {
    private options;
    private imap;
    constructor(options: Options);
    private errorHandler;
    start(): this;
    markSeen(uid: number): void;
    stop(): this;
    private scan;
}
export {};
