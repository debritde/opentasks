"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MailReceiver = void 0;
const Imap = require("imap");
const mailparser_1 = require("mailparser");
const EventEmitter = require("node:events");
const DEFAULT_OPTIONS = {
    tls: true,
    markSeen: false,
    box: "INBOX",
    search: ["UNSEEN"],
    autoReconnect: false,
    tlsOptions: {
        rejectUnauthorized: false
    }
};
class MailReceiver extends EventEmitter {
    constructor(options) {
        super();
        this.options = Object.assign(DEFAULT_OPTIONS, options);
        this.imap = new Imap(this.options);
    }
    errorHandler(error) {
        if ((error === null || error === void 0 ? void 0 : error.code) === "ETIMEDOUT" && this.options.autoReconnect) {
            this.imap.connect();
        }
        else {
            this.emit('error', error);
        }
    }
    start() {
        this.imap.once('end', () => this.emit('end'));
        this.imap.once('error', (error) => this.errorHandler(error));
        this.imap.once('close', (hasError) => this.emit('close', hasError));
        this.imap.once('uidvalidity', (uidValidity) => this.emit('uidvalidity', uidValidity));
        this.imap.once('ready', () => {
            this.emit('ready');
            this.imap.openBox(this.options.box, false, (error) => {
                if (error) {
                    this.errorHandler(error);
                    return;
                }
                this.scan();
                this.imap.on('mail', () => {
                    this.scan();
                });
            });
        });
        this.imap.connect();
        return this;
    }
    markSeen(uid) {
        this.imap.addFlags(uid, ['\\Seen'], (error) => {
            if (error) {
                this.errorHandler(error);
            }
        });
    }
    stop() {
        if (this.imap.state !== 'disconnected') {
            this.imap.end();
        }
        return this;
    }
    scan() {
        this.imap.search(this.options.search, (error, searchResults) => {
            if (error) {
                this.errorHandler(error);
                return;
            }
            if (!searchResults || searchResults.length === 0) {
                return;
            }
            var fetch = this.imap.fetch(searchResults, {
                markSeen: this.options.markSeen !== false,
                bodies: ''
            });
            fetch.on('message', (msg) => {
                msg.once('body', (stream) => {
                    msg.once('attributes', (attrs) => {
                        const uid = attrs.uid;
                        mailparser_1.simpleParser(stream)
                            .then(mail => {
                            this.emit('mail', Object.assign({ uid }, mail));
                        }).catch(error => {
                            this.errorHandler(error);
                        });
                    });
                });
            });
            fetch.once('error', (error) => this.errorHandler(error));
        });
        return this;
    }
    ;
}
exports.MailReceiver = MailReceiver;
